{"version":3,"sources":["components/CrudForm.js","components/CrudTableRow.js","components/CrudTable.js","components/CrudApp.js","App.js","reportWebVitals.js","index.js"],"names":["initailForm","name","constellation","id","CrudForm","createData","updateData","dataToEdit","setDataToEdit","useState","form","setForm","useEffect","handleChange","e","target","value","handleReset","onSubmit","preventDefault","descripcion","alert","type","placeholder","onChange","onClick","CrudTableRow","el","deleteData","CrudTable","data","length","map","colSpan","initialDb","CrudApp","db","setDb","className","Date","now","newData","window","confirm","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAEMA,EAAc,CAClBC,KAAM,GACNC,cAAe,GACfC,GAAI,MAoESC,EAjEE,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,WAAYC,EAA4C,EAA5CA,WAAYC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACtD,EAAwBC,mBAAST,GAAjC,mBAAOU,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WAEND,EADEJ,GAGMP,KAET,CAACO,IAEJ,IAAMM,EAAe,SAACC,GACpBH,EAAQ,2BACHD,GADE,kBAEJI,EAAEC,OAAOd,KAAOa,EAAEC,OAAOC,UAqBxBC,EAAc,SAACH,GACnBH,EAAQX,GACRQ,EAAc,OAGhB,OACE,gCACE,6BAAKD,EAAa,SAAW,YAC7B,uBAAMW,SAzBW,SAACJ,GACpBA,EAAEK,iBAEGT,EAAKT,MAASS,EAAKU,aAKR,OAAZV,EAAKP,GACPE,EAAWK,GAEXJ,EAAWI,GAGbO,KAVEI,MAAM,sBAqBN,UACE,uBACEC,KAAK,OACLrB,KAAK,OACLsB,YAAY,SACZC,SAAUX,EACVG,MAAON,EAAKT,OAEd,uBACEqB,KAAK,OACLrB,KAAK,cACLsB,YAAY,cACZC,SAAUX,EACVG,MAAON,EAAKR,gBAEd,uBAAOoB,KAAK,SAASN,MAAM,WAC3B,uBAAOM,KAAK,QAAQN,MAAM,UAAUS,QAASR,WClDtCS,EAfM,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,GAAInB,EAAgC,EAAhCA,cAAeoB,EAAiB,EAAjBA,WACnC3B,EAA0B0B,EAA1B1B,KAAMmB,EAAoBO,EAApBP,YAAajB,EAAOwB,EAAPxB,GAEzB,OACE,+BACE,6BAAKF,IACL,6BAAKmB,IACL,+BACE,wBAAQK,QAAS,kBAAMjB,EAAcmB,IAArC,oBACA,wBAAQF,QAAS,kBAAMG,EAAWzB,IAAlC,6BCyBO0B,EAjCG,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMtB,EAAgC,EAAhCA,cAAeoB,EAAiB,EAAjBA,WACxC,OACE,gCACE,gDACA,kCACE,gCACE,+BACE,wCACA,6CACA,+CAGJ,gCACGE,EAAKC,OAAS,EACbD,EAAKE,KAAI,SAACL,GAAD,OACP,cAAC,EAAD,CAEEA,GAAIA,EACJnB,cAAeA,EACfoB,WAAYA,GAHPD,EAAGxB,OAOZ,6BACE,oBAAI8B,QAAQ,IAAZ,kCCvBRC,EAAY,CAChB,CACE/B,GAAI,EACJF,KAAM,SACNmB,YAAa,UAEf,CACEjB,GAAI,EACJF,KAAM,QACNmB,YAAa,YAEf,CACEjB,GAAI,EACJF,KAAM,OACNmB,YAAa,aAEf,CACEjB,GAAI,EACJF,KAAM,QACNmB,YAAa,kBAEf,CACEjB,GAAI,EACJF,KAAM,MACNmB,YAAa,WAoDFe,EAhDC,WACd,MAAoB1B,mBAASyB,GAA7B,mBAAOE,EAAP,KAAWC,EAAX,KACA,EAAoC5B,mBAAS,MAA7C,mBAAOF,EAAP,KAAmBC,EAAnB,KA0BA,OACE,gCACE,0CACA,0BAAS8B,UAAU,WAAnB,UACE,cAAC,EAAD,CACEjC,WA7BW,SAACyB,GAClBA,EAAK3B,GAAKoC,KAAKC,MAEfH,EAAM,GAAD,mBAAKD,GAAL,CAASN,MA2BRxB,WAxBW,SAACwB,GAClB,IAAIW,EAAUL,EAAGJ,KAAI,SAACL,GAAD,OAASA,EAAGxB,KAAO2B,EAAK3B,GAAK2B,EAAOH,KACzDU,EAAMI,IAuBAlC,WAAYA,EACZC,cAAeA,IAEjB,cAAC,EAAD,CACEsB,KAAMM,EACN5B,cAAeA,EACfoB,WA1BW,SAACzB,GAKlB,GAJeuC,OAAOC,QAAP,iEACuCxC,EADvC,OAIf,CACE,IAAIsC,EAAUL,EAAGQ,QAAO,SAACjB,GAAD,OAAQA,EAAGxB,KAAOA,KAC1CkC,EAAMI,cC3CGI,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.db491222.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst initailForm = {\r\n  name: \"\",\r\n  constellation: \"\",\r\n  id: null,\r\n};\r\n\r\nconst CrudForm = ({ createData, updateData, dataToEdit, setDataToEdit }) => {\r\n  const [form, setForm] = useState(initailForm);\r\n\r\n  useEffect(() => {\r\n    if (dataToEdit) {\r\n      setForm(dataToEdit);\r\n    } else {\r\n      setForm(initailForm);\r\n    }\r\n  }, [dataToEdit]);\r\n\r\n  const handleChange = (e) => {\r\n    setForm({\r\n      ...form,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!form.name || !form.descripcion) {\r\n      alert(\"Datos incompletos\");\r\n      return;\r\n    }\r\n\r\n    if (form.id === null) {\r\n      createData(form);\r\n    } else {\r\n      updateData(form);\r\n    }\r\n\r\n    handleReset();\r\n  };\r\n\r\n  const handleReset = (e) => {\r\n    setForm(initailForm);\r\n    setDataToEdit(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>{dataToEdit ? \"Editar\" : \"Agregar\"}</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Nombre\"\r\n          onChange={handleChange}\r\n          value={form.name}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"descripcion\"\r\n          placeholder=\"Descripcion\"\r\n          onChange={handleChange}\r\n          value={form.constellation}\r\n        />\r\n        <input type=\"submit\" value=\"Enviar\" />\r\n        <input type=\"reset\" value=\"Limpiar\" onClick={handleReset} />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CrudForm;","import React from \"react\";\r\n\r\nconst CrudTableRow = ({ el, setDataToEdit, deleteData }) => {\r\n  let { name, descripcion, id } = el;\r\n\r\n  return (\r\n    <tr>\r\n      <td>{name}</td>\r\n      <td>{descripcion}</td>\r\n      <td>\r\n        <button onClick={() => setDataToEdit(el)}>Editar</button>\r\n        <button onClick={() => deleteData(id)}>Eliminar</button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default CrudTableRow;\r\n","import React from \"react\";\r\nimport CrudTableRow from \"./CrudTableRow\";\r\n\r\nconst CrudTable = ({ data, setDataToEdit, deleteData }) => {\r\n  return (\r\n    <div>\r\n      <h3>Tabla de Datos</h3>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Descripcion</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.length > 0 ? (\r\n            data.map((el) => (\r\n              <CrudTableRow\r\n                key={el.id}\r\n                el={el}\r\n                setDataToEdit={setDataToEdit}\r\n                deleteData={deleteData}\r\n              />\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan=\"3\">Sin datos</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CrudTable;\r\n","import React, { useState } from \"react\";\r\nimport CrudForm from \"./CrudForm\";\r\nimport CrudTable from \"./CrudTable\";\r\n\r\nconst initialDb = [\r\n  {\r\n    id: 1,\r\n    name: \"Carlos\",\r\n    descripcion: \"Doctor\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Maria\",\r\n    descripcion: \"Profesor\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Jose\",\r\n    descripcion: \"Conductor\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Sofia\",\r\n    descripcion: \"Administradora\",\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Max\",\r\n    descripcion: \"Mesero\",\r\n  },\r\n];\r\n\r\nconst CrudApp = () => {\r\n  const [db, setDb] = useState(initialDb);\r\n  const [dataToEdit, setDataToEdit] = useState(null);\r\n\r\n  const createData = (data) => {\r\n    data.id = Date.now();\r\n    //console.log(data);\r\n    setDb([...db, data]);\r\n  };\r\n\r\n  const updateData = (data) => {\r\n    let newData = db.map((el) => (el.id === data.id ? data : el));\r\n    setDb(newData);\r\n  };\r\n\r\n  const deleteData = (id) => {\r\n    let isDelete = window.confirm(\r\n      `¿Estás seguro de eliminar el registro con el id '${id}'?`\r\n    );\r\n\r\n    if (isDelete) {\r\n      let newData = db.filter((el) => el.id !== id);\r\n      setDb(newData);\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>CRUD App</h2>\r\n      <article className=\"grid-1-2\">\r\n        <CrudForm\r\n          createData={createData}\r\n          updateData={updateData}\r\n          dataToEdit={dataToEdit}\r\n          setDataToEdit={setDataToEdit}\r\n        />\r\n        <CrudTable\r\n          data={db}\r\n          setDataToEdit={setDataToEdit}\r\n          deleteData={deleteData}\r\n        />\r\n      </article>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CrudApp;\r\n","import CrudApp from \"./components/CrudApp\";\n\n\nfunction App() {\n  return (\n    <div>\n      <CrudApp />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}